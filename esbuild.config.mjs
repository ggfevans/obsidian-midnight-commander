import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFileSync, mkdirSync, existsSync } from "fs";
import { dirname } from "path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Function to copy required files to build output
function copyRequiredFiles() {
	// Create build-output directory if it doesn't exist
	if (!existsSync("build-output")) {
		mkdirSync("build-output", { recursive: true });
	}
	
	// Copy manifest.json
	if (existsSync("manifest.json")) {
		copyFileSync("manifest.json", "build-output/manifest.json");
		console.log("üìã Copied manifest.json");
	}
	
	// Copy styles.css
	if (existsSync("styles.css")) {
		copyFileSync("styles.css", "build-output/styles.css");
		console.log("üé® Copied styles.css");
	}
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "build-output/main.js",
	minify: prod,
});

// Copy required files first
copyRequiredFiles();

if (prod) {
	await context.rebuild();
	console.log("üöÄ Production build complete in ./build-output/");
	process.exit(0);
} else {
	console.log("üëÄ Development build complete, watching for changes...");
	console.log("üìÅ Output directory: ./build-output/");
	await context.watch();
}
